package b4smt_pext

import chisel3.ChiselEnum

object PExtensionOperation extends ChiselEnum {
  // 16 add sub
  val ADD16, RADD16, URADD16, KADD16, UKADD16, SUB16, RSUB16, URSUB16, KSUB16,
    UKSUB16, CRAS16, RCRAS16, URCRAS16, KCRAS16, UKCRAS16, CRSA16, RCRSA16,
    URCRSA16, KCRSA16, UKCRSA16, STAS16, RSTAS16, URSTAS16, KSTAS16, UKSTAS16,
    STSA16, RSTSA16, URSTSA16, KSTSA16, UKSTSA16 = Value
  // 8 add sub
  val ADD8, RADD8, URADD8, KADD8, UKADD8, SUB8, RSUB8, URSUB8, KSUB8, UKSUB8 =
    Value
  // 16 shift
  val SRA16, SRAI16, SRA16_U, SRAI16_U, SRL16, SRLI16, SRL16_U, SRLI16_U, SLL16,
    SLLI16, KSLL16, KSLLI16, KSLRA16, KSLRA16_U = Value
  // 8 shift
  val SRA8, SRAI8, SRA8_U, SRAI8_U, SRL8, SRLI8, SRL8_U, SRLI8_U, SLL8, SLLI8,
    KSLL8, KSLLI8, KSLRA8, KSLRA8_U = Value
  // 16 cmp
  val CMPEQ16, SCMPLT16, SCMPLE16, UCMPLT16, UCMPLE16 = Value
  // 8 cmp
  val CMPEQ8, SCMPLT8, SCMPLE8, UCMPLT8, UCMPLE8 = Value
  // 16 mul
  val SMUL16, SMULX16, UMUL16, UMULX16, KHM16, KHMX16 = Value
  // 8 mul
  val SMUL8, SMULX8, UMUL8, UMULX8, KHM8, KHMX8 = Value
  // 16 misc
  val SMIN16, UMIN16, SMAX16, UMAX16, SCLIP16, UCLIP16, KABS16, CLRS16, CLZ16 =
    Value // SWAP16 <- alias
  // 8 misc
  val SMIN8, UMIN8, SMAX8, UMAX8, SCLIP8, UCLIP8, KABS8, CLRS8, CLZ8 =
    Value // SWAP8 <- alias
  // 8 unpack
  val SUNPKD810, SUNPKD820, SUNPKD830, SUNPKD831, SUNPKD832, ZUNPKD810,
    ZUNPKD820, ZUNPKD830, ZUNPKD831, ZUNPKD832 = Value
  // 16 pack
  val PKBB16, PKBT16, PKTB16, PKTT16 = Value
  // MSW 32x32 mul add
  val SMMUL, SMMUL_U, KMMAC, KMMAC_U, KMMSB, KMMSB_U, KWMMUL, KWMMUL_U = Value
  // MSW 32x16 mul add
  val SMMWB, SMMWB_U, SMMWT, SMMWT_U, KMMAWB, KMMAWB_U, KMMAWT, KMMAWT_U,
    KMMWB2, KMMWB2_U, KMMWT2, KMMWT2_U, KMMAWB2, KMMAWB2_U, KMMAWT2, KMMAWT2_U =
    Value
  // signed 16 mul with 32 add sub
  val SMBB16, SMBT16, SMTT16, KMDA, KMXDA, SMDS, SMDRS, SMXDS, KMABB, KMABT,
    KMATT, KMADA, KMAXDA, KMADS, KMADRS, KMAXDS, KMSDA, KMSXDA = Value
  // signed 16 mul with 64 add sub
  val SMAL = Value
  // MISC
  val SCLIP32, UCLIP32, CLRS32, CLZ32, PBSAD, PBSADA = Value
  // 8bul with 32 add
  val SMAQA, UMAQA, SMAQASU = Value
  // 64 data computation
  val /*ADD64,TODO */ RADD64, URADD64, KADD64, UKADD64, /*SUB64, TODO*/ RSUB64,
    URSUB64, KSUB64, UKSUB64 = Value
  // 32 mul with 64 add sub
  val SMAR64, SMSR64, UMAR64, UMSR64, KMAR64, KMSR64, UKMAR64, UKMSR64 = Value
  // signed 16 mul with 64 add/sub
  val SMALBB, SMALBT, SMALTT, SMALDA, SMALXDA, SMALDS, SMALDRS, SMALXDS, SMSLDA,
    SMSLXDA = Value
  // non simd Q15 saturate
  val KADDH, KSUBH, KHMBB, KHMBT, KHMTT, UKADDH, UKSUBH = Value
  // Q31 saturate
  val KADDW, UKADDW, KSUBW, UKSUBW, KDMBB, KDMBT, KDMTT, KSLRAW, KSLRAW_U,
    KSLLW, KSLLIW, KDMABB, KDMABT, KDMATT, KABSW = Value
  // 32 computation
  val RADDW, URADDW, RSUBW, URSUBW, MULR64, MULSR64, MSUBR32 = Value
  // overflow saturation status manipulation (pseudo)
  //    RDOV,CLROV,
  // Misc2
  val AVE, SRA_U, SRAI_U,
  /*BITREV,  BITREVI, TODO:? */ /*WEXT, WEXTI, TODO:OK? */ CMIX, INSB,
    MADDR32, // MSUBR32,???
  MAX, MIN = Value
  // RV64 only add sub
  val ADD32, RADD32, URADD32, KADD32, UKADD32, SUB32, RSUB32, URSUB32, KSUB32,
    UKSUB32, CRAS32, RCRAS32, URCRAS32, KCRAS32, UKCRAS32, CRSA32, RCRSA32,
    URCRSA32, KCRSA32, UKCRSA32, STAS32, RSTAS32, URSTAS32, KSTAS32, UKSTAS32,
    STSA32, RSTSA32, URSTSA32, KSTSA32, UKSTSA32 = Value
  // 64 only 32 shift
  val SRA32, SRAI32, SRA32_U, SRAI32_U, SRL32, SRLI32, SRL32_U, SRLI32_U, SLL32,
    SLLI32, KSLL32, KSLLI32, KSLRA32, KSLRA32_U = Value
  // 64 only 32 misc
  val SMIN32, UMIN32, SMAX32, UMAX32, KABS32 = Value
  // 64 only Q15
  val KHMBB16, KHMBT16, KHMTT16, KDMBB16, KDMBT16, KDMTT16, KDMABB16, KDMABT16,
    KDMATT16 = Value
  // 64 only 32 mul TODO: is this correct? does not seem like an alias
  /* val SMBB32, SMBT32, SMTT32 = Value */
  // 64 only 32 mul and add
  val KMABB32, KMABT32, KMATT32 = Value
  // 64 only 32 parallel mul and add
  val KMDA32, KMXDA32, /*KMADA32, alias*/ KMAXDA32, KMADS32, KMADRS32, KMAXDS32,
    KMSDA32, KMSXDA32, SMDS32, SMDRS32, SMXDS32 = Value
  // 64 only non simd 32 shift
  val SRAIW_U = Value
  //  // 64 only 32 pack
  //  val PKBB32, PKBT32, PKTB32, PKTT32 = Value
}
